directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Comment implements Node {
  id: ID!
  text: String!
  epics: [Epic!]
  projects: [Project!]
  users: [User!]
}
"""A connection to a list of items."""
type CommentConnection {
  """A list of edges."""
  edges: [CommentEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
CommentWhereInput is used for filtering Comment objects.
Input was generated by ent.
"""
input CommentWhereInput {
  not: CommentWhereInput
  and: [CommentWhereInput!]
  or: [CommentWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """text field predicates"""
  text: String
  textNEQ: String
  textIn: [String!]
  textNotIn: [String!]
  textGT: String
  textGTE: String
  textLT: String
  textLTE: String
  textContains: String
  textHasPrefix: String
  textHasSuffix: String
  textEqualFold: String
  textContainsFold: String
  """epics edge predicates"""
  hasEpics: Boolean
  hasEpicsWith: [EpicWhereInput!]
  """projects edge predicates"""
  hasProjects: Boolean
  hasProjectsWith: [ProjectWhereInput!]
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
}
"""
CreateCommentInput is used for create Comment object.
Input was generated by ent.
"""
input CreateCommentInput {
  text: String!
  epicIDs: [ID!]
  projectIDs: [ID!]
  userIDs: [ID!]
}
"""
CreateEpicInput is used for create Epic object.
Input was generated by ent.
"""
input CreateEpicInput {
  name: String!
  description: String!
  projectID: ID
  reporterID: ID
  assigneeID: ID
  commentIDs: [ID!]
}
"""
CreateProjectInput is used for create Project object.
Input was generated by ent.
"""
input CreateProjectInput {
  name: String!
  description: String
  epicIDs: [ID!]
  ownerID: ID
  commentIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  name: String!
  surname: String!
  username: String!
  email: String!
  ownIDs: [ID!]
  reporterIDs: [ID!]
  assigneeIDs: [ID!]
  commentIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Epic implements Node {
  id: ID!
  name: String!
  description: String!
  project: Project
  reporter: User
  assignee: User
  comments: [Comment!]
}
"""A connection to a list of items."""
type EpicConnection {
  """A list of edges."""
  edges: [EpicEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type EpicEdge {
  """The item at the end of the edge."""
  node: Epic
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
EpicWhereInput is used for filtering Epic objects.
Input was generated by ent.
"""
input EpicWhereInput {
  not: EpicWhereInput
  and: [EpicWhereInput!]
  or: [EpicWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """project edge predicates"""
  hasProject: Boolean
  hasProjectWith: [ProjectWhereInput!]
  """reporter edge predicates"""
  hasReporter: Boolean
  hasReporterWith: [UserWhereInput!]
  """assignee edge predicates"""
  hasAssignee: Boolean
  hasAssigneeWith: [UserWhereInput!]
  """comments edge predicates"""
  hasComments: Boolean
  hasCommentsWith: [CommentWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/jenmud/consensus/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Project implements Node {
  id: ID!
  name: String!
  description: String
  epics: [Epic!]
  owner: User
  comments: [Comment!]
}
"""A connection to a list of items."""
type ProjectConnection {
  """A list of edges."""
  edges: [ProjectEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge."""
  node: Project
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
ProjectWhereInput is used for filtering Project objects.
Input was generated by ent.
"""
input ProjectWhereInput {
  not: ProjectWhereInput
  and: [ProjectWhereInput!]
  or: [ProjectWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """epics edge predicates"""
  hasEpics: Boolean
  hasEpicsWith: [EpicWhereInput!]
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
  """comments edge predicates"""
  hasComments: Boolean
  hasCommentsWith: [CommentWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  comments(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Comments returned from the connection."""
    where: CommentWhereInput
  ): CommentConnection!
  epics(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Epics returned from the connection."""
    where: EpicWhereInput
  ): EpicConnection!
  projects(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Projects returned from the connection."""
    where: ProjectWhereInput
  ): ProjectConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}
"""
UpdateCommentInput is used for update Comment object.
Input was generated by ent.
"""
input UpdateCommentInput {
  text: String
  addEpicIDs: [ID!]
  removeEpicIDs: [ID!]
  addProjectIDs: [ID!]
  removeProjectIDs: [ID!]
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
}
"""
UpdateEpicInput is used for update Epic object.
Input was generated by ent.
"""
input UpdateEpicInput {
  name: String
  description: String
  clearProject: Boolean
  projectID: ID
  clearReporter: Boolean
  reporterID: ID
  clearAssignee: Boolean
  assigneeID: ID
  addCommentIDs: [ID!]
  removeCommentIDs: [ID!]
}
"""
UpdateProjectInput is used for update Project object.
Input was generated by ent.
"""
input UpdateProjectInput {
  name: String
  clearDescription: Boolean
  description: String
  addEpicIDs: [ID!]
  removeEpicIDs: [ID!]
  clearOwner: Boolean
  ownerID: ID
  addCommentIDs: [ID!]
  removeCommentIDs: [ID!]
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  name: String
  surname: String
  username: String
  email: String
  addOwnIDs: [ID!]
  removeOwnIDs: [ID!]
  addReporterIDs: [ID!]
  removeReporterIDs: [ID!]
  addAssigneeIDs: [ID!]
  removeAssigneeIDs: [ID!]
  addCommentIDs: [ID!]
  removeCommentIDs: [ID!]
}
type User implements Node {
  id: ID!
  name: String!
  surname: String!
  username: String!
  email: String!
  owns: [Project!]
  reporter: [Epic!]
  assignee: [Epic!]
  comments: [Comment!]
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """surname field predicates"""
  surname: String
  surnameNEQ: String
  surnameIn: [String!]
  surnameNotIn: [String!]
  surnameGT: String
  surnameGTE: String
  surnameLT: String
  surnameLTE: String
  surnameContains: String
  surnameHasPrefix: String
  surnameHasSuffix: String
  surnameEqualFold: String
  surnameContainsFold: String
  """username field predicates"""
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """owns edge predicates"""
  hasOwns: Boolean
  hasOwnsWith: [ProjectWhereInput!]
  """reporter edge predicates"""
  hasReporter: Boolean
  hasReporterWith: [EpicWhereInput!]
  """assignee edge predicates"""
  hasAssignee: Boolean
  hasAssigneeWith: [EpicWhereInput!]
  """comments edge predicates"""
  hasComments: Boolean
  hasCommentsWith: [CommentWhereInput!]
}
