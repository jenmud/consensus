// Code generated by ent, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSurname holds the string denoting the surname field in the database.
	FieldSurname = "surname"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// EdgeOwns holds the string denoting the owns edge name in mutations.
	EdgeOwns = "owns"
	// EdgeReporter holds the string denoting the reporter edge name in mutations.
	EdgeReporter = "reporter"
	// EdgeAssignee holds the string denoting the assignee edge name in mutations.
	EdgeAssignee = "assignee"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// Table holds the table name of the user in the database.
	Table = "users"
	// OwnsTable is the table that holds the owns relation/edge.
	OwnsTable = "projects"
	// OwnsInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	OwnsInverseTable = "projects"
	// OwnsColumn is the table column denoting the owns relation/edge.
	OwnsColumn = "user_owns"
	// ReporterTable is the table that holds the reporter relation/edge.
	ReporterTable = "epics"
	// ReporterInverseTable is the table name for the Epic entity.
	// It exists in this package in order to avoid circular dependency with the "epic" package.
	ReporterInverseTable = "epics"
	// ReporterColumn is the table column denoting the reporter relation/edge.
	ReporterColumn = "user_reporter"
	// AssigneeTable is the table that holds the assignee relation/edge.
	AssigneeTable = "epics"
	// AssigneeInverseTable is the table name for the Epic entity.
	// It exists in this package in order to avoid circular dependency with the "epic" package.
	AssigneeInverseTable = "epics"
	// AssigneeColumn is the table column denoting the assignee relation/edge.
	AssigneeColumn = "user_assignee"
	// CommentsTable is the table that holds the comments relation/edge. The primary key declared below.
	CommentsTable = "user_comments"
	// CommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentsInverseTable = "comments"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldSurname,
	FieldUsername,
	FieldEmail,
}

var (
	// CommentsPrimaryKey and CommentsColumn2 are the table columns denoting the
	// primary key for the comments relation (M2M).
	CommentsPrimaryKey = []string{"user_id", "comment_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// SurnameValidator is a validator for the "surname" field. It is called by the builders before save.
	SurnameValidator func(string) error
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
)
