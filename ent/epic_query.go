// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jenmud/consensus/ent/comment"
	"github.com/jenmud/consensus/ent/epic"
	"github.com/jenmud/consensus/ent/predicate"
	"github.com/jenmud/consensus/ent/project"
	"github.com/jenmud/consensus/ent/user"
)

// EpicQuery is the builder for querying Epic entities.
type EpicQuery struct {
	config
	limit             *int
	offset            *int
	unique            *bool
	order             []OrderFunc
	fields            []string
	inters            []Interceptor
	predicates        []predicate.Epic
	withProject       *ProjectQuery
	withReporter      *UserQuery
	withAssignee      *UserQuery
	withComments      *CommentQuery
	withFKs           bool
	modifiers         []func(*sql.Selector)
	loadTotal         []func(context.Context, []*Epic) error
	withNamedComments map[string]*CommentQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EpicQuery builder.
func (eq *EpicQuery) Where(ps ...predicate.Epic) *EpicQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit the number of records to be returned by this query.
func (eq *EpicQuery) Limit(limit int) *EpicQuery {
	eq.limit = &limit
	return eq
}

// Offset to start from.
func (eq *EpicQuery) Offset(offset int) *EpicQuery {
	eq.offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *EpicQuery) Unique(unique bool) *EpicQuery {
	eq.unique = &unique
	return eq
}

// Order specifies how the records should be ordered.
func (eq *EpicQuery) Order(o ...OrderFunc) *EpicQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryProject chains the current query on the "project" edge.
func (eq *EpicQuery) QueryProject() *ProjectQuery {
	query := (&ProjectClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(epic.Table, epic.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, epic.ProjectTable, epic.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReporter chains the current query on the "reporter" edge.
func (eq *EpicQuery) QueryReporter() *UserQuery {
	query := (&UserClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(epic.Table, epic.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, epic.ReporterTable, epic.ReporterColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssignee chains the current query on the "assignee" edge.
func (eq *EpicQuery) QueryAssignee() *UserQuery {
	query := (&UserClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(epic.Table, epic.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, epic.AssigneeTable, epic.AssigneeColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryComments chains the current query on the "comments" edge.
func (eq *EpicQuery) QueryComments() *CommentQuery {
	query := (&CommentClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(epic.Table, epic.FieldID, selector),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, epic.CommentsTable, epic.CommentsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Epic entity from the query.
// Returns a *NotFoundError when no Epic was found.
func (eq *EpicQuery) First(ctx context.Context) (*Epic, error) {
	nodes, err := eq.Limit(1).All(newQueryContext(ctx, TypeEpic, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{epic.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *EpicQuery) FirstX(ctx context.Context) *Epic {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Epic ID from the query.
// Returns a *NotFoundError when no Epic ID was found.
func (eq *EpicQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(1).IDs(newQueryContext(ctx, TypeEpic, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{epic.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *EpicQuery) FirstIDX(ctx context.Context) int {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Epic entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Epic entity is found.
// Returns a *NotFoundError when no Epic entities are found.
func (eq *EpicQuery) Only(ctx context.Context) (*Epic, error) {
	nodes, err := eq.Limit(2).All(newQueryContext(ctx, TypeEpic, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{epic.Label}
	default:
		return nil, &NotSingularError{epic.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *EpicQuery) OnlyX(ctx context.Context) *Epic {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Epic ID in the query.
// Returns a *NotSingularError when more than one Epic ID is found.
// Returns a *NotFoundError when no entities are found.
func (eq *EpicQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(2).IDs(newQueryContext(ctx, TypeEpic, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{epic.Label}
	default:
		err = &NotSingularError{epic.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *EpicQuery) OnlyIDX(ctx context.Context) int {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Epics.
func (eq *EpicQuery) All(ctx context.Context) ([]*Epic, error) {
	ctx = newQueryContext(ctx, TypeEpic, "All")
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Epic, *EpicQuery]()
	return withInterceptors[[]*Epic](ctx, eq, qr, eq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eq *EpicQuery) AllX(ctx context.Context) []*Epic {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Epic IDs.
func (eq *EpicQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = newQueryContext(ctx, TypeEpic, "IDs")
	if err := eq.Select(epic.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *EpicQuery) IDsX(ctx context.Context) []int {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *EpicQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeEpic, "Count")
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eq, querierCount[*EpicQuery](), eq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eq *EpicQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *EpicQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeEpic, "Exist")
	switch _, err := eq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *EpicQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EpicQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *EpicQuery) Clone() *EpicQuery {
	if eq == nil {
		return nil
	}
	return &EpicQuery{
		config:       eq.config,
		limit:        eq.limit,
		offset:       eq.offset,
		order:        append([]OrderFunc{}, eq.order...),
		inters:       append([]Interceptor{}, eq.inters...),
		predicates:   append([]predicate.Epic{}, eq.predicates...),
		withProject:  eq.withProject.Clone(),
		withReporter: eq.withReporter.Clone(),
		withAssignee: eq.withAssignee.Clone(),
		withComments: eq.withComments.Clone(),
		// clone intermediate query.
		sql:    eq.sql.Clone(),
		path:   eq.path,
		unique: eq.unique,
	}
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EpicQuery) WithProject(opts ...func(*ProjectQuery)) *EpicQuery {
	query := (&ProjectClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withProject = query
	return eq
}

// WithReporter tells the query-builder to eager-load the nodes that are connected to
// the "reporter" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EpicQuery) WithReporter(opts ...func(*UserQuery)) *EpicQuery {
	query := (&UserClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withReporter = query
	return eq
}

// WithAssignee tells the query-builder to eager-load the nodes that are connected to
// the "assignee" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EpicQuery) WithAssignee(opts ...func(*UserQuery)) *EpicQuery {
	query := (&UserClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withAssignee = query
	return eq
}

// WithComments tells the query-builder to eager-load the nodes that are connected to
// the "comments" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EpicQuery) WithComments(opts ...func(*CommentQuery)) *EpicQuery {
	query := (&CommentClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withComments = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Epic.Query().
//		GroupBy(epic.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eq *EpicQuery) GroupBy(field string, fields ...string) *EpicGroupBy {
	eq.fields = append([]string{field}, fields...)
	grbuild := &EpicGroupBy{build: eq}
	grbuild.flds = &eq.fields
	grbuild.label = epic.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Epic.Query().
//		Select(epic.FieldName).
//		Scan(ctx, &v)
func (eq *EpicQuery) Select(fields ...string) *EpicSelect {
	eq.fields = append(eq.fields, fields...)
	sbuild := &EpicSelect{EpicQuery: eq}
	sbuild.label = epic.Label
	sbuild.flds, sbuild.scan = &eq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EpicSelect configured with the given aggregations.
func (eq *EpicQuery) Aggregate(fns ...AggregateFunc) *EpicSelect {
	return eq.Select().Aggregate(fns...)
}

func (eq *EpicQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eq); err != nil {
				return err
			}
		}
	}
	for _, f := range eq.fields {
		if !epic.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *EpicQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Epic, error) {
	var (
		nodes       = []*Epic{}
		withFKs     = eq.withFKs
		_spec       = eq.querySpec()
		loadedTypes = [4]bool{
			eq.withProject != nil,
			eq.withReporter != nil,
			eq.withAssignee != nil,
			eq.withComments != nil,
		}
	)
	if eq.withProject != nil || eq.withReporter != nil || eq.withAssignee != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, epic.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Epic).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Epic{config: eq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(eq.modifiers) > 0 {
		_spec.Modifiers = eq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eq.withProject; query != nil {
		if err := eq.loadProject(ctx, query, nodes, nil,
			func(n *Epic, e *Project) { n.Edges.Project = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withReporter; query != nil {
		if err := eq.loadReporter(ctx, query, nodes, nil,
			func(n *Epic, e *User) { n.Edges.Reporter = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withAssignee; query != nil {
		if err := eq.loadAssignee(ctx, query, nodes, nil,
			func(n *Epic, e *User) { n.Edges.Assignee = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withComments; query != nil {
		if err := eq.loadComments(ctx, query, nodes,
			func(n *Epic) { n.Edges.Comments = []*Comment{} },
			func(n *Epic, e *Comment) { n.Edges.Comments = append(n.Edges.Comments, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedComments {
		if err := eq.loadComments(ctx, query, nodes,
			func(n *Epic) { n.appendNamedComments(name) },
			func(n *Epic, e *Comment) { n.appendNamedComments(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range eq.loadTotal {
		if err := eq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eq *EpicQuery) loadProject(ctx context.Context, query *ProjectQuery, nodes []*Epic, init func(*Epic), assign func(*Epic, *Project)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Epic)
	for i := range nodes {
		if nodes[i].epic_project == nil {
			continue
		}
		fk := *nodes[i].epic_project
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "epic_project" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EpicQuery) loadReporter(ctx context.Context, query *UserQuery, nodes []*Epic, init func(*Epic), assign func(*Epic, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Epic)
	for i := range nodes {
		if nodes[i].user_reporter == nil {
			continue
		}
		fk := *nodes[i].user_reporter
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_reporter" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EpicQuery) loadAssignee(ctx context.Context, query *UserQuery, nodes []*Epic, init func(*Epic), assign func(*Epic, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Epic)
	for i := range nodes {
		if nodes[i].user_assignee == nil {
			continue
		}
		fk := *nodes[i].user_assignee
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_assignee" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EpicQuery) loadComments(ctx context.Context, query *CommentQuery, nodes []*Epic, init func(*Epic), assign func(*Epic, *Comment)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Epic)
	nids := make(map[int]map[*Epic]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(epic.CommentsTable)
		s.Join(joinT).On(s.C(comment.FieldID), joinT.C(epic.CommentsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(epic.CommentsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(epic.CommentsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*Epic]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "comments" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (eq *EpicQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	if len(eq.modifiers) > 0 {
		_spec.Modifiers = eq.modifiers
	}
	_spec.Node.Columns = eq.fields
	if len(eq.fields) > 0 {
		_spec.Unique = eq.unique != nil && *eq.unique
	}
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *EpicQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   epic.Table,
			Columns: epic.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: epic.FieldID,
			},
		},
		From:   eq.sql,
		Unique: true,
	}
	if unique := eq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := eq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, epic.FieldID)
		for i := range fields {
			if fields[i] != epic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *EpicQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(epic.Table)
	columns := eq.fields
	if len(columns) == 0 {
		columns = epic.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eq.unique != nil && *eq.unique {
		selector.Distinct()
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedComments tells the query-builder to eager-load the nodes that are connected to the "comments"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EpicQuery) WithNamedComments(name string, opts ...func(*CommentQuery)) *EpicQuery {
	query := (&CommentClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedComments == nil {
		eq.withNamedComments = make(map[string]*CommentQuery)
	}
	eq.withNamedComments[name] = query
	return eq
}

// EpicGroupBy is the group-by builder for Epic entities.
type EpicGroupBy struct {
	selector
	build *EpicQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *EpicGroupBy) Aggregate(fns ...AggregateFunc) *EpicGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the selector query and scans the result into the given value.
func (egb *EpicGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeEpic, "GroupBy")
	if err := egb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EpicQuery, *EpicGroupBy](ctx, egb.build, egb, egb.build.inters, v)
}

func (egb *EpicGroupBy) sqlScan(ctx context.Context, root *EpicQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*egb.flds)+len(egb.fns))
		for _, f := range *egb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*egb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EpicSelect is the builder for selecting fields of Epic entities.
type EpicSelect struct {
	*EpicQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (es *EpicSelect) Aggregate(fns ...AggregateFunc) *EpicSelect {
	es.fns = append(es.fns, fns...)
	return es
}

// Scan applies the selector query and scans the result into the given value.
func (es *EpicSelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeEpic, "Select")
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EpicQuery, *EpicSelect](ctx, es.EpicQuery, es, es.inters, v)
}

func (es *EpicSelect) sqlScan(ctx context.Context, root *EpicQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(es.fns))
	for _, fn := range es.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*es.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
