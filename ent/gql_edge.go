// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (e *Epic) Project(ctx context.Context) (*Project, error) {
	result, err := e.Edges.ProjectOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryProject().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Project) Epics(ctx context.Context) (result []*Epic, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pr.NamedEpics(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pr.Edges.EpicsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pr.QueryEpics().All(ctx)
	}
	return result, err
}

func (pr *Project) Reporter(ctx context.Context) (*User, error) {
	result, err := pr.Edges.ReporterOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryReporter().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Project) Assignee(ctx context.Context) (*User, error) {
	result, err := pr.Edges.AssigneeOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryAssignee().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Reporter(ctx context.Context) (result []*Project, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedReporter(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.ReporterOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryReporter().All(ctx)
	}
	return result, err
}

func (u *User) Assignee(ctx context.Context) (result []*Project, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedAssignee(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.AssigneeOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryAssignee().All(ctx)
	}
	return result, err
}
