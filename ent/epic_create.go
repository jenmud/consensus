// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jenmud/consensus/ent/comment"
	"github.com/jenmud/consensus/ent/epic"
	"github.com/jenmud/consensus/ent/project"
	"github.com/jenmud/consensus/ent/user"
)

// EpicCreate is the builder for creating a Epic entity.
type EpicCreate struct {
	config
	mutation *EpicMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ec *EpicCreate) SetName(s string) *EpicCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetDescription sets the "description" field.
func (ec *EpicCreate) SetDescription(s string) *EpicCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (ec *EpicCreate) SetProjectID(id int) *EpicCreate {
	ec.mutation.SetProjectID(id)
	return ec
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (ec *EpicCreate) SetNillableProjectID(id *int) *EpicCreate {
	if id != nil {
		ec = ec.SetProjectID(*id)
	}
	return ec
}

// SetProject sets the "project" edge to the Project entity.
func (ec *EpicCreate) SetProject(p *Project) *EpicCreate {
	return ec.SetProjectID(p.ID)
}

// SetReporterID sets the "reporter" edge to the User entity by ID.
func (ec *EpicCreate) SetReporterID(id int) *EpicCreate {
	ec.mutation.SetReporterID(id)
	return ec
}

// SetNillableReporterID sets the "reporter" edge to the User entity by ID if the given value is not nil.
func (ec *EpicCreate) SetNillableReporterID(id *int) *EpicCreate {
	if id != nil {
		ec = ec.SetReporterID(*id)
	}
	return ec
}

// SetReporter sets the "reporter" edge to the User entity.
func (ec *EpicCreate) SetReporter(u *User) *EpicCreate {
	return ec.SetReporterID(u.ID)
}

// SetAssigneeID sets the "assignee" edge to the User entity by ID.
func (ec *EpicCreate) SetAssigneeID(id int) *EpicCreate {
	ec.mutation.SetAssigneeID(id)
	return ec
}

// SetNillableAssigneeID sets the "assignee" edge to the User entity by ID if the given value is not nil.
func (ec *EpicCreate) SetNillableAssigneeID(id *int) *EpicCreate {
	if id != nil {
		ec = ec.SetAssigneeID(*id)
	}
	return ec
}

// SetAssignee sets the "assignee" edge to the User entity.
func (ec *EpicCreate) SetAssignee(u *User) *EpicCreate {
	return ec.SetAssigneeID(u.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (ec *EpicCreate) AddCommentIDs(ids ...int) *EpicCreate {
	ec.mutation.AddCommentIDs(ids...)
	return ec
}

// AddComments adds the "comments" edges to the Comment entity.
func (ec *EpicCreate) AddComments(c ...*Comment) *EpicCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ec.AddCommentIDs(ids...)
}

// Mutation returns the EpicMutation object of the builder.
func (ec *EpicCreate) Mutation() *EpicMutation {
	return ec.mutation
}

// Save creates the Epic in the database.
func (ec *EpicCreate) Save(ctx context.Context) (*Epic, error) {
	return withHooks[*Epic, EpicMutation](ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EpicCreate) SaveX(ctx context.Context) *Epic {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EpicCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EpicCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EpicCreate) check() error {
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Epic.name"`)}
	}
	if v, ok := ec.mutation.Name(); ok {
		if err := epic.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Epic.name": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Epic.description"`)}
	}
	return nil
}

func (ec *EpicCreate) sqlSave(ctx context.Context) (*Epic, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EpicCreate) createSpec() (*Epic, *sqlgraph.CreateSpec) {
	var (
		_node = &Epic{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: epic.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: epic.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.Name(); ok {
		_spec.SetField(epic.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.SetField(epic.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := ec.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   epic.ProjectTable,
			Columns: []string{epic.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.epic_project = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ReporterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   epic.ReporterTable,
			Columns: []string{epic.ReporterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_reporter = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.AssigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   epic.AssigneeTable,
			Columns: []string{epic.AssigneeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_assignee = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   epic.CommentsTable,
			Columns: epic.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EpicCreateBulk is the builder for creating many Epic entities in bulk.
type EpicCreateBulk struct {
	config
	builders []*EpicCreate
}

// Save creates the Epic entities in the database.
func (ecb *EpicCreateBulk) Save(ctx context.Context) ([]*Epic, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Epic, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EpicMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EpicCreateBulk) SaveX(ctx context.Context) []*Epic {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EpicCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EpicCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
