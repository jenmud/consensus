syntax = "proto3";

package service;
option go_package = "github.com/jenmud/consensus/business/service";

import "google/protobuf/timestamp.proto";

// Role represents the role of a user.
enum Role {
    // USER represents a regular user.
    USER = 0;

    // ADMIN represents an admin user.
    ADMIN = 1;
}

// User represents a single user.
message User {
    // id is the unique identifier of the user.
    int64 id = 1;

    // created_at is the timestamp when the user was created.
    google.protobuf.Timestamp created_at = 2;

    // updated_at is the timestamp when the user was last updated.
    google.protobuf.Timestamp updated_at = 3;

    // first_name is the first name of the user.
    string first_name = 4;

    // last_name is the last name of the user.
    string last_name = 5;

    // email is the email address of the user.
    string email = 6;

    // password is the password of the user.
    string password = 7;

    // role is the role of the user.
    Role role = 8;
}

// GetUsersReq is the request for fetching existing users.
message GetUsersReq {}

// UsersResp is the response containing all the existing users.
message Users {
    // users is the list of users.
    repeated User users = 1;
}

// Project represents a single project.
message Project {
    // id is the unique identifier of the project.
    int64 id = 1;

    // created_at is the timestamp when the project was created.
    google.protobuf.Timestamp created_at = 2;

    // updated_at is the timestamp when the project was last updated.
    google.protobuf.Timestamp updated_at = 3;

    // name is the name of the project.
    string name = 4;

    // description is the description of the project.
    string description = 5;

    // owner is the owner of the project.
    User owner = 6;
}

// ProjectsReq is the request for fetching existing projects.
message ProjectsReq{}

// ProjectsResp is the response containing all the existing projects.
message Projects{
    // projects is the list of projects.
    repeated Project projects = 1;
}

// Consensus is the main consensus service.
service Consensus {
    // CreateUser creates a new user.
    rpc CreateUser(User) returns (User) {}

    // GetUsers returns all the existing users.
    rpc GetUsers(GetUsersReq) returns (Users) {}

    // CreateProject creates a new project.
    rpc CreateProject(Project) returns (Project) {}

    // GetProjects returns all the existing projects.
    rpc GetProjects(ProjectsReq) returns (Projects) {}
}